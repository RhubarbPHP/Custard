#!/usr/bin/env php
<?php

namespace Rhubarb\Custard;

// Change the working directory to the top level project folder.
use Rhubarb\Crown\Exceptions\Handlers\ExceptionHandler;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\ArgvInput;

const CUSTARD_VERSION = "0.1";
const CUSTARD_NAME = "Custard";

// Initiate our bootstrap script to boot all libraries required.
if (file_exists(__DIR__."/../../../../platform/boot-rhubarb.php")){
    // If Rhubarb is the root project (unit testing) we have a different path to load.
    require_once __DIR__."/../../../../platform/boot-rhubarb.php";
} else {
    require_once __DIR__."/../../../../vendor/rhubarbphp/rhubarb/platform/boot-application.php";
}

// Disable exception trapping as there will be no valid URL handler able to return a sensible
// interpretation of the exception details. CLI scripts are never seen publicly so it is more
// useful to have the real exception text and isn't a security risk.
ExceptionHandler::disableExceptionTrapping();

$console = new Application(CUSTARD_NAME, CUSTARD_VERSION);

$modules = \Rhubarb\Crown\Application::current()->getRegisteredModules();
krsort($modules);

foreach( $modules as $module ){
    $commands = $module->getCustardCommands();

    $console->addCommands(
        $commands
    );
}

$input = new ArgvInput();
if ($input->hasParameterOption(array('--command', '-c'))) {
    $commandClassString = $input->getParameterOption(array('--command', '-c'));

    if (class_exists($commandClassString)) {
        $console->addCommands(
            [ new $commandClassString() ]
        );
    } else {
        die("The command class `$commandClassString` could not be found.\r\n");
    }
}

$console->run();
